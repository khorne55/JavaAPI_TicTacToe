/*
LeaderBoard

17/04/2018
Ricky Kearney - 14141647
Piotr Kurzynoga - 14143097

This class shows the leaderboard window.
It makes a table with all registered users and their stats.
The stats are calculated based on the gameState function.

 */
package tictactoe;

import java.util.ArrayList;
import java.util.List;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author puser
 */
public class LeaderBoard extends javax.swing.JFrame {

    /**
     * Creates new form LeaderBoard
     */
    public LeaderBoard() {
        initComponents(); // make the window 
        getLeaderBoard(); // calculate stats and update the window
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameHeader = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        leaderBoard = new javax.swing.JTable();
        gameMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gameHeader.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        gameHeader.setText("Tic-Tac-Toe");

        leaderBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserName", "Wins", "Losses", "Draws"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(leaderBoard);
        if (leaderBoard.getColumnModel().getColumnCount() > 0) {
            leaderBoard.getColumnModel().getColumn(0).setResizable(false);
            leaderBoard.getColumnModel().getColumn(1).setResizable(false);
            leaderBoard.getColumnModel().getColumn(2).setResizable(false);
            leaderBoard.getColumnModel().getColumn(3).setResizable(false);
        }

        gameMenuButton.setText("Game Menu");
        gameMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(gameHeader))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(gameMenuButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(gameHeader)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(gameMenuButton)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gameMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameMenuButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        GameMenu games = new GameMenu();
        games.getFrame().setVisible(true);
    }//GEN-LAST:event_gameMenuButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeaderBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeaderBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeaderBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeaderBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeaderBoard().setVisible(true);
            }
        });
    }

    // calculate wins, losses and draws for each player. then update window
    private void getLeaderBoard() {
        TicTacToe game = new TicTacToe();
        TTTWebService myLink = game.getProxy();
        int win; // win var
        int p1; // player 1's ID
        int p2; // Player 2's ID
        ArrayList<String> usernames = new ArrayList<>(); // Arrays to hold a users stats. Arrays aligned with username array
        ArrayList<Integer> wins = new ArrayList<>();
        ArrayList<Integer> losses = new ArrayList<>();
        ArrayList<Integer> draws = new ArrayList<>();

        // generate array with all usernames
        String myGames = myLink.leagueTable(); // get data from web service
        if (!myGames.equals("ERROR-NOGAMES") || !myGames.equals("ERROR-DB")) { // once there are games
            String[] lines = myGames.split("\n");
            for (String line : lines) {
                String[] result = line.split(",");
                try {
                    if (!usernames.contains(result[1])) { // if username hasn't been added, add it
                        usernames.add(result[1]); // add the username
                        wins.add(0); // set place holders
                        losses.add(0);
                        draws.add(0);
                    }
                    if (!usernames.contains(result[2])) { // if username hasn't been added, add it
                        usernames.add(result[2]); // add the username
                        wins.add(0); // set place holders
                        losses.add(0);
                        draws.add(0);
                    }
                    win = Integer.parseInt(result[3]); // get the win from resulted data
                    p1 = usernames.indexOf(result[1]);
                    p2 = usernames.indexOf(result[2]);
                    switch (win) {
                        case 1: // P1 won
                            wins.set(p1, wins.get(p1) + 1); // update wins for that player
                            losses.set(p2, losses.get(p2) + 1); // update lossses for that player
                            break;
                        case 2: // P2 won
                            wins.set(p2, wins.get(p2) + 1);
                            losses.set(p1, losses.get(p1) + 1);
                            break;
                        case 3: // Draw
                            draws.set(p1, draws.get(p1) + 1);
                            draws.set(p2, draws.get(p2) + 1);
                            break;
                        default:
                            break;
                    }
                } catch (Exception e) { // catch any problem
                    System.out.println("Error checking leagueTable:" + e);
                }
            }
            // generate the leaderboard table
            DefaultTableModel model = (DefaultTableModel) leaderBoard.getModel();
            for (String username : usernames) { // for each user
                int i = usernames.indexOf(username);
                model.addRow(new Object[]{username, wins.get(i), losses.get(i), draws.get(i)}); // add a row with that user stats
            }
            
            // allow the table rows to be sortable
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(leaderBoard.getModel());
            leaderBoard.setRowSorter(sorter);
            
            // set the win column sorted and in descending order
            List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
            sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
            sorter.setSortKeys(sortKeys); // set the sort
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel gameHeader;
    private javax.swing.JButton gameMenuButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable leaderBoard;
    // End of variables declaration//GEN-END:variables
}
